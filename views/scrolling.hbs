<script src="/scripts/scrolling-page.js"></script>

<p>Although not a modern CSS-feature, the side-bar and the main page content are styled so as to scroll independently. 
  To see this in action, resize the browser window to be short enough so that scroll bars appear next to the side-bar and/or the main panel.</p>
<p>The styling changes required to achieve this are:</p>
<ul>
  <li>
    Identify all the ancestor-elements of the side-bar and the main content and set their height to be equal to the view-port:
    <pre>
html, body {
  height: 100vh;
}

#main-container {
  height: 100vh;
  ...
}</pre>
  </li>
  <li>
    Set the element that contains the side-bar and the main content to not scroll by setting <code>overflow-y: hidden</code> to it, and set the 
    side-bar and main content to scroll independently by setting <code>overflow-y: auto</code> to both:
    <pre>
#main-container {
  overflow-y: hidden;
  ...
}

#main-menu-bar {
  overflow-y: auto;
}

#page-content {
  overflow-y: auto;
}</pre>
  </li>
  <li>
    Unfortunately, this will make it so that the content-div will no longer scroll in response to pressing the arrows on the keyboard &mdash; not
    until you click on it to focus it. Luckily, we can focus the content-div programmatically, which will re-enable scrolling using the arrows.<br />
    First, we make the content-div focusable by setting a tabindex to it:
    <pre>&lt;div id=&quot;page-content&quot; tabindex=&quot;0&quot;&gt;
...</pre>
    Then, we add the following bit of javascript to focus this div after page-load:
    <pre>window.addEventListener('DOMContentLoaded', _ => {
  document.getElementById('page-content').focus();
});</pre>
  </li>
</ul>
